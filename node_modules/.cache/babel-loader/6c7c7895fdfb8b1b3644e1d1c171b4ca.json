{"ast":null,"code":"import _objectSpread from \"/home/hanzhe/finalgame/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport \"./styles.scss\";\nvar cancel = actions.cancel;\n\nfunction say(text) {\n  return send(function (_context) {\n    return {\n      type: \"SPEAK\",\n      value: text\n    };\n  });\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt, speechprompt, helpmes) {\n  return {\n    initial: \"prompt\",\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      hist: {\n        type: \"history\"\n      },\n      maxspeech: {\n        entry: say(speechprompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      ask: {\n        entry: [listen(), send('MAXSPEECH', {\n          delay: 5000,\n          id: \"maxsp\"\n        })]\n      },\n      help: {\n        entry: say(helpmes),\n        on: {\n          ENDSPEECH: \"hist\"\n        }\n      },\n      nomatch: {\n        entry: say(\"Sorry, please say your English in a clear way\"),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      }\n    }\n  };\n}\n\nfunction hint(prompt, state) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: state\n    }\n  };\n}\n\nvar commands = {\n  \"help\": \"h\",\n  \"Help\": \"H\"\n};\nvar grammar3 = {\n  \"count\": 0\n};\nvar grammar4 = {\n  \"scores\": 0\n};\nexport var dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"query\",\n          cond: function cond(context) {\n            return !(context.recResult in commands);\n          },\n          actions: [assign(function (context) {\n            return {\n              option: context.recResult\n            };\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".help\",\n          cond: function cond(context) {\n            return context.recResult in commands;\n          }\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] <= 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] > 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      }\n    }, promptAndAsk(\"What would you like to do?\", \"You did not respondï¼Œjust tell me what you want to do\", \"Please kindly tell me what you want to do\")),\n    query: {\n      invoke: {\n        id: \"rasa\",\n        src: function src(context, event) {\n          return nluRequest(context.option);\n        },\n        onDone: {\n          target: \"menu\",\n          actions: [assign(function (context, event) {\n            return {\n              option: event.data.intent.name\n            };\n          }), function (context, event) {\n            return console.log(event.data);\n          }] //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n        },\n        onError: {\n          target: \"welcome\",\n          actions: function actions(context, event) {\n            return console.log(event.data);\n          }\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: \"todo\",\n          cond: function cond(context) {\n            return context.option === \"todo\";\n          }\n        }, {\n          target: \"timer\",\n          cond: function cond(context) {\n            return context.option === \"timer\";\n          }\n        }, {\n          target: \"game\",\n          cond: function cond(context) {\n            return context.option === \"game\";\n          }\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(function (context) {\n            return {\n              type: \"SPEAK\",\n              value: \"OK. I understand\\uFF0Cyou want a \".concat(context.option, \".\")\n            };\n          })\n        }\n        /*            nomatch: {\n                       entry: say(\"Sorry, I don\"t understand\"),\n                       on: { ENDSPEECH: \"prompt\" }\n           } */\n\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(function (context) {\n            return {\n              type: \"SPEAK\",\n              value: \"Let\\\"s create a to do item\"\n            };\n          })\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(function (context) {\n            return {\n              type: \"SPEAK\",\n              value: \"Let\\\"s create a timer\"\n            };\n          })\n        }\n      }\n    },\n    game: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"question1\"\n      },\n      states: {\n        prompt: {\n          entry: send(function (context) {\n            return {\n              type: \"SPEAK\",\n              value: \"Let\\\"s play How well do you know me?\"\n            };\n          })\n        }\n      }\n    },\n    question1: _objectSpread({\n      on: {\n        RECOGNISED: [{\n          cond: function cond(context) {\n            return context.recResult === \"a\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint1\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"A\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint1\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"mint green\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint1\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"b\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint2\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"B\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint2\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"purple\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint2\"\n        }, {\n          target: \".nomatch\",\n          cond: function cond(context) {\n            return !(context.recResult in commands);\n          },\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: function cond(context) {\n            return context.recResult in commands;\n          }\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] <= 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] > 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      }\n    }, promptAndAsk(\"What colour do I like?  A mint green, B purple\", \"You did not respond, please tell me the colour\", \"Just choose one colour\")),\n    hint1: _objectSpread({}, hint(\"Yes! You are right! Let's move to the next question.\", \"question2\")),\n    hint2: _objectSpread({}, hint(\"Sorry! you are wrong! Let's move to the next question.\", \"question2\")),\n    question2: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: function cond(context) {\n            return context.recResult === \"a\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint3\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"A\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint3\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"pizza\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint3\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"b\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint4\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"B\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint4\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"dumplings\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint4\"\n        }, {\n          target: \".nomatch\",\n          cond: function cond(context) {\n            return !(context.recResult in commands);\n          },\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: function cond(context) {\n            return context.recResult in commands;\n          }\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] <= 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] > 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      }\n    }, promptAndAsk(\"What's my favourite food?  A pizza, B dumplings\", \"You did not respond, please tell me your answer\", \"Just choose one food\")),\n    hint3: _objectSpread({}, hint(\"Yes! You are right! Let's continue to the next question.\", \"question3\")),\n    hint4: _objectSpread({}, hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"question3\")),\n    question3: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: function cond(context) {\n            return context.recResult === \"b\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint5\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"B\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint5\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"lavender\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint5\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"a\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint6\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"A\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint6\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"rosa\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint6\"\n        }, {\n          target: \".nomatch\",\n          cond: function cond(context) {\n            return !(context.recResult in commands);\n          },\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: function cond(context) {\n            return context.recResult in commands;\n          }\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] <= 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] > 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      }\n    }, promptAndAsk(\"What's my favourite flower?  A rose, B lavender\", \"You did not respond, please tell me your answer\", \"Just choose one country\")),\n    hint5: _objectSpread({}, hint(\"Yes! You are right! Let's continue to the next question.\", \"question4\")),\n    hint6: _objectSpread({}, hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"question4\")),\n    question4: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: function cond(context) {\n            return context.recResult === \"b\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint7\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"B\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint7\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"cat\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint7\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"a\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint8\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"A\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint8\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"dog\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint8\"\n        }, {\n          target: \".nomatch\",\n          cond: function cond(context) {\n            return !(context.recResult in commands);\n          },\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: function cond(context) {\n            return context.recResult in commands;\n          }\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] <= 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] > 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      }\n    }, promptAndAsk(\"What's my favourite pet?  A dog, B cat\", \"You did not respond, please tell me your answer\", \"Just choose one food\")),\n    hint7: _objectSpread({}, hint(\"Yes! You are right! Let's continue to the next question.\", \"question5\")),\n    hint8: _objectSpread({}, hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"question5\")),\n    question5: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: function cond(context) {\n            return context.recResult === \"b\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint9\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"B\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint9\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"coffee\";\n          },\n          actions: [assign(function (context) {\n            grammar4[\"scores\"] = grammar4[\"scores\"] + 1;\n          }), assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint9\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"a\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint10\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"A\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint10\"\n        }, {\n          cond: function cond(context) {\n            return context.recResult === \"tea\";\n          },\n          actions: [assign(function (context) {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"hint10\"\n        }, {\n          target: \".nomatch\",\n          cond: function cond(context) {\n            return !(context.recResult in commands);\n          },\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \".help\",\n          cond: function cond(context) {\n            return context.recResult in commands;\n          }\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] <= 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: function cond(context) {\n            return grammar3[\"count\"] > 2;\n          },\n          actions: assign(function (context) {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      }\n    }, promptAndAsk(\"What's my favourite drink?  A tea, B coffee\", \"You did not respond, please tell me your answer\", \"Just choose one drink\")),\n    hint9: _objectSpread({}, hint(\"Yes! You are right! Let's continue to the next question.\", \"conclusion\")),\n    hint10: _objectSpread({}, hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"conclusion\")),\n    conclusion: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: \"success\",\n          cond: function cond(context) {\n            return grammar4[\"scores\"] >= 3;\n          }\n        }, {\n          target: \"failure\",\n          cond: function cond(context) {\n            return grammar4[\"scores\"] < 3;\n          }\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(function (context) {\n            return {\n              type: \"SPEAK\",\n              value: \"Congratulations! Your final score is \".concat(grammar4[\"scores\"], \" out of 5.\")\n            };\n          })\n        }\n      }\n    },\n    success: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"You can have a date with me!\")\n        }\n      }\n    },\n    failure: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Sorry, you need to try harder!\")\n        }\n      }\n    }\n  }\n};\n/* RASA API\n*  */\n\nvar proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nvar rasaurl = \"https://finalprojectgame.herokuapp.com/model/parse\";\n\nvar nluRequest = function nluRequest(text) {\n  return fetch(new Request(proxyurl + rasaurl, {\n    method: \"POST\",\n    headers: {\n      \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\"\n    },\n    // only required with proxy\n    body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n  })).then(function (data) {\n    return data.json();\n  });\n};","map":{"version":3,"sources":["/home/hanzhe/finalgame/react-xstate-colourchanger/src/dmGame.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","speechprompt","helpmes","initial","states","entry","on","ENDSPEECH","hist","maxspeech","ask","delay","id","help","nomatch","hint","state","commands","grammar3","grammar4","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","option","MAXSPEECH","query","invoke","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","todo","timer","game","question1","hint1","hint2","question2","hint3","hint4","question3","hint5","hint6","question4","hint7","hint8","question5","hint9","hint10","conclusion","success","failure","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel}=actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string, speechprompt:string, helpmes:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n            maxspeech: {\n                entry: say(speechprompt),\n             on: {ENDSPEECH: \"ask\"}\n            \n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n            },\n            help: {entry: say(helpmes),\n                on: {ENDSPEECH: \"hist\" }\n            },\n            nomatch: {\n                entry: say(\"Sorry, please say your English in a clear way\"),\n                on: { ENDSPEECH:  \"prompt\" }\n            \n            }\n        }})\n}\n\nfunction hint(prompt: string, state: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n        on: {ENDSPEECH: state }})\n}\n\n\n\n\n\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nconst grammar3 ={\"count\": 0}\n\nconst grammar4 ={\"scores\": 0}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n                    \n                },\n                {target: \".help\",\n                cond: (context) => context.recResult in commands }],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            \n        ...promptAndAsk(\"What would you like to do?\", \n        \"You did not respondï¼Œjust tell me what you want to do\", \"Please kindly tell me what you want to do\")\n    }, \n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"game\", cond: (context) => context.option === \"game\"}\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understandï¼Œyou want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        game: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"question1\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s play How well do you know me?`\n                    }))\n                }}\n        },\n        question1: {\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint1\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint1\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"mint green\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint1\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint2\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint2\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"purple\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint2\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n             ...promptAndAsk(\"What colour do I like?  A mint green, B purple\", \"You did not respond, please tell me the colour\", \"Just choose one colour\")\n        },\n        hint1:{\n            ...hint(\"Yes! You are right! Let's move to the next question.\", \"question2\")  \n        },\n        hint2:{\n            ...hint(\"Sorry! you are wrong! Let's move to the next question.\", \"question2\")  \n        },\n        question2: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint3\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint3\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"pizza\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint3\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint4\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint4\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"dumplings\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint4\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            ...promptAndAsk(\"What's my favourite food?  A pizza, B dumplings\", \"You did not respond, please tell me your answer\", \"Just choose one food\") \n        },\n        hint3:{\n            ...hint(\"Yes! You are right! Let's continue to the next question.\", \"question3\")  \n        },\n        hint4:{\n            ...hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"question3\")  \n        },\n        question3: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint5\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint5\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"lavender\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint5\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint6\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint6\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"rosa\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint6\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            ...promptAndAsk(\"What's my favourite flower?  A rose, B lavender\", \"You did not respond, please tell me your answer\", \"Just choose one country\") \n        },\n        hint5:{\n            ...hint(\"Yes! You are right! Let's continue to the next question.\", \"question4\")  \n        },\n        hint6:{\n            ...hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"question4\")  \n        },\n        question4: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint7\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint7\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"cat\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint7\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint8\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint8\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"dog\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint8\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            ...promptAndAsk(\"What's my favourite pet?  A dog, B cat\", \"You did not respond, please tell me your answer\", \"Just choose one food\") \n        },\n        hint7:{\n            ...hint(\"Yes! You are right! Let's continue to the next question.\", \"question5\")  \n        },\n        hint8:{\n            ...hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"question5\")  \n        },\n        question5: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint9\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint9\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"coffee\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint9\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint10\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint10\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"tea\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint10\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            ...promptAndAsk(\"What's my favourite drink?  A tea, B coffee\", \"You did not respond, please tell me your answer\", \"Just choose one drink\") \n        },\n        hint9:{\n            ...hint(\"Yes! You are right! Let's continue to the next question.\", \"conclusion\")  \n        },\n        hint10:{\n            ...hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"conclusion\")  \n        },\n        conclusion: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"success\", cond: (context) => grammar4[\"scores\"] >= 3 },\n                    { target: \"failure\", cond: (context) => grammar4[\"scores\"] < 3 },\n                ]\n           }, \n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Congratulations! Your final score is ${grammar4[\"scores\"]} out of 5.`\n                    })),\n                }\n            }\n        },\n\t        success:{\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"init\" },\n                states: {\n                    prompt: {\n                        entry: say(\"You can have a date with me!\"),\n                        \n                    },\n                }\n            },\n            failure:{\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"init\" },\n                states: {\n                    prompt: {\n                        entry: say(\"Sorry, you need to try harder!\"),\n                        \n                    },\n                }\n            },\n        \n        }\n    })\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://finalprojectgame.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n"]},"metadata":{},"sourceType":"module"}