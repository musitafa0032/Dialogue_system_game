{"version":3,"sources":["dmGame.ts","index.tsx"],"names":["cancel","actions","say","text","send","_context","type","value","promptAndAsk","prompt","speechprompt","helpmes","initial","states","entry","on","ENDSPEECH","hist","maxspeech","ask","delay","id","help","nomatch","hint","state","commands","grammar3","grammar4","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","assign","option","MAXSPEECH","query","invoke","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","todo","timer","game","question1","hint1","hint2","question2","hint3","hint4","question3","hint5","hint6","question4","hint7","hint8","question5","hint9","hint10","conclusion","success","failure","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.f3ab62c9.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel}=actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string, speechprompt:string, helpmes:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n            maxspeech: {\n                entry: say(speechprompt),\n             on: {ENDSPEECH: \"ask\"}\n            \n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n            },\n            help: {entry: say(helpmes),\n                on: {ENDSPEECH: \"hist\" }\n            },\n            nomatch: {\n                entry: say(\"Sorry, please say your English in a clear way\"),\n                on: { ENDSPEECH:  \"prompt\" }\n            \n            }\n        }})\n}\n\nfunction hint(prompt: string, state: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n        on: {ENDSPEECH: state }})\n}\n\n\n\n\n\nconst commands = {\"help\": \"h\", \"Help\": \"H\"}\n\nconst grammar3 ={\"count\": 0}\n\nconst grammar4 ={\"scores\": 0}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n                    \n                },\n                {target: \".help\",\n                cond: (context) => context.recResult in commands }],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            \n        ...promptAndAsk(\"What would you like to do?\", \n        \"You did not respond，just tell me what you want to do\", \"Please kindly tell me what you want to do\")\n    }, \n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"game\", cond: (context) => context.option === \"game\"}\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand，you want a ${context.option}.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don\"t understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        game: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"question1\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s play How well do you know me and let's go to the first question`\n                    }))\n                }}\n        },\n        question1: {\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint1\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint1\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"mint green\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint1\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint2\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint2\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"purple\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint2\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n             ...promptAndAsk(\"What colour do I like?  A, mint green, B purple\", \"You did not respond, please tell me the colour\", \"Just choose one colour\")\n        },\n        hint1:{\n            ...hint(\"Yes! You are right! Let's move to the next question.\", \"question2\")  \n        },\n        hint2:{\n            ...hint(\"Sorry! you are wrong! Let's move to the next question.\", \"question2\")  \n        },\n        question2: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint3\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint3\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"pizza\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint3\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint4\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint4\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"dumplings\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint4\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            ...promptAndAsk(\"What's my favourite food?  A, pizza, B dumplings\", \"You did not respond, please tell me your answer\", \"Just choose one food\") \n        },\n        hint3:{\n            ...hint(\"Yes! You are right! Let's continue to the next question.\", \"question3\")  \n        },\n        hint4:{\n            ...hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"question3\")  \n        },\n        question3: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint5\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint5\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"lavender\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint5\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint6\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint6\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"rosa\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint6\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            ...promptAndAsk(\"What's my favourite flower?  A, rose, B lavender\", \"You did not respond, please tell me your answer\", \"Just choose one country\") \n        },\n        hint5:{\n            ...hint(\"Yes! You are right! Let's continue to the next question.\", \"question4\")  \n        },\n        hint6:{\n            ...hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"question4\")  \n        },\n        question4: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint7\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint7\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"cat\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint7\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint8\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint8\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"dog\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint8\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            ...promptAndAsk(\"What's my favourite pet?  A, dog, B cat\", \"You did not respond, please tell me your answer\", \"Just choose one food\") \n        },\n        hint7:{\n            ...hint(\"Yes! You are right! Let's continue to the next question.\", \"question5\")  \n        },\n        hint8:{\n            ...hint(\"Sorry! you are wrong! Let's contiue to the next question.\", \"question5\")  \n        },\n        question5: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n                    cond: (context) => context.recResult === \"b\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint9\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"B\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint9\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"coffee\",\n                    actions: [assign((context) => { grammar4[\"scores\"]= grammar4[\"scores\"]+1} ),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint9\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"a\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint10\"\n\n                },\n                {\n                    cond: (context) => context.recResult === \"A\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint10\"\n\n                },\n                \n                {\n                    cond: (context) => context.recResult === \"tea\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    target: \"hint10\"\n\n                },\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \".help\",\n                 cond: (context) => context.recResult in commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            ...promptAndAsk(\"What's my favourite drink?  A, tea, B coffee\", \"You did not respond, please tell me your answer\", \"Just choose one drink\") \n        },\n        hint9:{\n            ...hint(\"Yes! You are right! Let's see your final score.\", \"conclusion\")  \n        },\n        hint10:{\n            ...hint(\"Sorry! you are wrong! Let's see your final score.\", \"conclusion\")  \n        },\n        conclusion: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"success\", cond: (context) => grammar4[\"scores\"] >= 3 },\n                    { target: \"failure\", cond: (context) => grammar4[\"scores\"] < 3 },\n                ]\n           }, \n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Well,your final score is ${grammar4[\"scores\"]} out of 5.`\n                    })),\n                }\n            }\n        },\n\t        success:{\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"init\" },\n                states: {\n                    prompt: {\n                        entry: say(\"Congratulations! You can have a date with me!\"),\n                        \n                    },\n                }\n            },\n            failure:{\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"init\" },\n                states: {\n                    prompt: {\n                        entry: say(\"Sorry, you need to try harder!\"),\n                        \n                    },\n                }\n            },\n        \n        }\n    })\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://finalprojectgame.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State, actions} from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmGame\";\n\nconst {cancel}=actions\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {target: 'idle', actions: cancel(\"maxsp\")},\n                        MAXSPEECH: 'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    listen!\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    speak!\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Welcome!\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive your speech.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://finalprojectgame.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}