{"ast":null,"code":"import{send,assign}from\"xstate\";function say(text){return send(function(_context){return{type:\"SPEAK\",value:text};});}function listen(){return send('LISTEN');}var grammar={\"John\":{person:\"John Appleseed\"},\"on Friday\":{day:\"Friday\"},\"at ten\":{time:\"10:00\"}};export var dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:say(\"Let's create an appointment\")}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:function cond(context){return\"person\"in(grammar[context.recResult]||{});},actions:assign(function(context){return{person:grammar[context.recResult].person};}),target:\"day\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},day:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(function(context){return{type:\"SPEAK\",value:\"OK. \".concat(context.person,\". On which day is your meeting?\")};})}}}}};","map":{"version":3,"sources":["/home/hanzhe/finalgame/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch"],"mappings":"AAAA,OAAwBA,IAAxB,CAAsCC,MAAtC,KAAoD,QAApD,CAGA,QAASC,CAAAA,GAAT,CAAaC,IAAb,CAAyD,CACrD,MAAOH,CAAAA,IAAI,CAAC,SAACI,QAAD,QAA2B,CAAEC,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAEH,IAAxB,CAA3B,EAAD,CAAX,CACH,CAED,QAASI,CAAAA,MAAT,EAAgD,CAC5C,MAAOP,CAAAA,IAAI,CAAC,QAAD,CAAX,CACH,CAED,GAAMQ,CAAAA,OAA8E,CAAG,CACnF,OAAQ,CAAEC,MAAM,CAAE,gBAAV,CAD2E,CAEnF,YAAa,CAAEC,GAAG,CAAE,QAAP,CAFsE,CAGnF,SAAU,CAAEC,IAAI,CAAE,OAAR,CAHyE,CAAvF,CAOA,MAAO,IAAMC,CAAAA,SAAmD,CAAI,CAChEC,OAAO,CAAE,MADuD,CAEhEC,MAAM,CAAE,CACJC,IAAI,CAAE,CACFC,EAAE,CAAE,CACAC,KAAK,CAAE,SADP,CADF,CADF,CAMJC,OAAO,CAAE,CACLL,OAAO,CAAE,QADJ,CAELG,EAAE,CAAE,CAAEG,SAAS,CAAE,KAAb,CAFC,CAGLL,MAAM,CAAE,CACJM,MAAM,CAAE,CAAEC,KAAK,CAAEnB,GAAG,CAAC,6BAAD,CAAZ,CADJ,CAHH,CANL,CAaJoB,GAAG,CAAE,CACDT,OAAO,CAAE,QADR,CAEDG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACTC,IAAI,CAAE,cAACC,OAAD,QAAa,WAAajB,OAAO,CAACiB,OAAO,CAACC,SAAT,CAAP,EAA8B,EAA3C,CAAb,EADG,CAETC,OAAO,CAAE1B,MAAM,CAAC,SAACwB,OAAD,CAAa,CAAE,MAAO,CAAEhB,MAAM,CAAED,OAAO,CAACiB,OAAO,CAACC,SAAT,CAAP,CAA2BjB,MAArC,CAAP,CAAsD,CAAtE,CAFN,CAGTmB,MAAM,CAAE,KAHC,CAAD,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFH,CAWDd,MAAM,CAAE,CACJM,MAAM,CAAE,CACJC,KAAK,CAAEnB,GAAG,CAAC,2BAAD,CADN,CAEJc,EAAE,CAAE,CAAEG,SAAS,CAAE,KAAb,CAFA,CADJ,CAKJU,GAAG,CAAE,CACDR,KAAK,CAAEd,MAAM,EADZ,CALD,CAQJuB,OAAO,CAAE,CACLT,KAAK,CAAEnB,GAAG,CAAC,yBAAD,CADL,CAELc,EAAE,CAAE,CAAEG,SAAS,CAAE,QAAb,CAFC,CARL,CAXP,CAbD,CAsCJT,GAAG,CAAE,CACDG,OAAO,CAAE,QADR,CAEDG,EAAE,CAAE,CAAEG,SAAS,CAAE,MAAb,CAFH,CAGDL,MAAM,CAAE,CACJM,MAAM,CAAE,CACJC,KAAK,CAAErB,IAAI,CAAC,SAACyB,OAAD,QAAc,CACtBpB,IAAI,CAAE,OADgB,CAEtBC,KAAK,eAASmB,OAAO,CAAChB,MAAjB,mCAFiB,CAAd,EAAD,CADP,CADJ,CAHP,CAtCD,CAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"at ten\": { time: \"10:00\" },\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    }))\n                },\n            }\n        }\n    }\n})\n"]},"metadata":{},"sourceType":"module"}